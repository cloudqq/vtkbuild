FROM ubuntu:18.04

ENV DEBIAN_FRONTEND noninteractive

ENV CMAKE_VER 3.17.1
ENV PYTHON_VER 3.8.2

RUN apt-get update && apt-get  -y install \
	curl \
	wget \
	git \
        libssl-dev \
        python2.7 \
        re2c \
        libffi-dev \
	ninja-build \
	build-essential \
	zlib1g-dev \
	libncurses5-dev \
       	libncursesw5-dev \
        libreadline-dev \
        libsqlite3-dev  \
        libgdbm-dev \
        libdb5.3-dev \
 	libbz2-dev \
 	libexpat1-dev \
        liblzma-dev \
        tk-dev  \
	libpciaccess-dev libelf-dev bison flex \
 	libwayland-dev 	wayland-protocols libwayland-egl-backend-dev libxdamage-dev libxcb-glx0  libxcb-glx0-dev libx11-xcb-dev libxcb-dri2-0-dev libxcb-dri3-dev libgl1-mesa-dev \
 	libxrandr-dev libxrandr2 mesa-utils xvfb x11vnc

WORKDIR /temp

RUN git clone https://github.com/ncopa/su-exec.git su-exec \
  && cd su-exec \
  && make \
  && chmod 770 su-exec && cp su-exec /usr/local/sbin

RUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/cmake-${CMAKE_VER}.tar.gz \
    && tar xvf cmake-${CMAKE_VER}.tar.gz && cd cmake-${CMAKE_VER} && ./bootstrap && make -j`nproc` && make install \
    && cmake --version \
    && rm -rf /temp

RUN git clone git://github.com/ninja-build/ninja.git && cd ninja && git checkout release && python2.7 configure.py && ninja && cp ninja /usr/bin && rm -rf /temp

RUN    wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/llvm-10.0.0.src.tar.xz \
    && wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang-10.0.0.src.tar.xz \
    && wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/compiler-rt-10.0.0.src.tar.xz \
    && tar xf llvm-10.0.0.src.tar.xz \
    && cd llvm-10.0.0.src \
    && tar xvf ../compiler-rt-10.0.0.src.tar.xz -C projects \
    && tar xvf ../clang-10.0.0.src.tar.xz -C tools \
    && mv tools/clang-10.0.0.src tools/clang \
    && mv projects/compiler-rt-10.0.0.src projects/compiler-rt \
    && mkdir -v build && cd build \
    && cmake -DCMAKE_INSTALL_PREFIX=/usr         \
       -DLLVM_ENABLE_FFI=ON                      \
       -DCMAKE_BUILD_TYPE=Release                \
       -DLLVM_BUILD_LLVM_DYLIB=ON                \
       -DLLVM_LINK_LLVM_DYLIB=ON                 \
       -DLLVM_ENABLE_RTTI=ON                     \
       -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
       -DLLVM_BUILD_TESTS=ON                     \
       -Wno-dev -G Ninja .. \
    && ninja && ninja install \
    && rm -rf /temp
                     

# install build tools and python prerequisites

# download and extract python
RUN wget https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tar.xz \
    && tar xf Python-${PYTHON_VER}.tar.xz \
    && cd Python-${PYTHON_VER} \
    && ./configure --enable-optimizations \
    && make -j `nproc`  \
    && make altinstall \
    && update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.8 1 \
    && update-alternatives --config python3
RUN update-alternatives --install /usr/bin/pip3 pip3 /usr/local/bin/pip3.8 1 \
    && update-alternatives --config pip3
RUN python3 --version && pip3 install --upgrade pip && pip3 --version

RUN pip3 install meson && meson --version
RUN pip3 install mako

# install libdrm
RUN wget -q https://dri.freedesktop.org/libdrm/libdrm-2.4.101.tar.xz \
    && tar xvf libdrm-2.4.101.tar.xz \
    && cd libdrm-2.4.101 && mkdir build && cd build && meson .. -Dudev=true && ninja install

#RUN wget -q https://sourceware.org/ftp/valgrind/valgrind-3.15.0.tar.bz2 \
#    && tar jxf valgrind-3.15.0.tar.bz2 && cd valgrind-3.15.0 \
#    && sed -i 's|/doc/valgrind||' docs/Makefile.in \
#    && ./configure --prefix=/usr \
#            --datadir=/usr/share/doc/valgrind-3.15.0 && make -j`nproc` && make install
  
RUN wget -q https://mesa.freedesktop.org/archive/mesa-20.0.4.tar.xz \
    && tar xvf mesa-20.0.4.tar.xz  && mkdir build \
    && cd    build  \
    && CXXFLAGS="-O2 -g -DDEFAULT_SOFTWARE_DEPTH_BITS=31"   CFLAGS="-O2 -g -DDEFAULT_SOFTWARE_DEPTH_BITS=31" \
     meson \
     -Dbuildtype=release            \
     -Dgallium-drivers="swrast"     \
     -Dgallium-nine=false           \
     -Dglx=dri                      \
     -Dosmesa=gallium               \
     -Dvalgrind=false               \
     -Dlibunwind=false              \
     ../mesa-20.0.4                 \
     && unset GALLIUM_DRV DRI_DRIVERS \
     && ninja install

WORKDIR /workspace

RUN wget -q https://www.tcpdump.org/release/libpcap-1.9.1.tar.gz \
    && tar xvf libpcap-1.9.1.tar.gz && cd libpcap-1.9.1 && ./configure && make -j`nproc` && make install

# include boost
RUN wget https://dl.bintray.com/boostorg/release/1.72.0/source/boost_1_72_0.tar.bz2 \
    && tar xjf boost_1_72_0.tar.bz2 && cd boost_1_72_0 \
    && ./bootstrap.sh --prefix=/usr/local/boost_1_72_0 \
    && ./b2 cxxflags="--std=c++17" -j`nproc` install

# install vtk
RUN wget https://www.vtk.org/files/release/8.2/VTK-8.2.0.tar.gz \
    && tar xvf VTK-8.2.0.tar.gz \
    && mkdir build-vtk-8.2.0-off && cd build-vtk-8.2.0-off \
    && cmake -D CMAKE_BUILD_TYPE=Release \
    -D VTK_WRAP_PYTHON=OFF	 \
    -D VTK_OPENGL_HAS_OSMESA=ON \
    -D VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN=ON \
    -D VTK_USE_X=OFF \
    -D CMAKE_INSTALL_PREFIX=/usr/local/vtk820offscreen \
    -D LIBRARY_OUTPUT_PATH=./output_libs \
    -D BOOST_ROOT=/usr/local/boost_1_72_0 \
    ../VTK-8.2.0 \
    && make -j`nproc` && make install \
    && cd /workspace && mkdir build-vtk-8.2.0-on && cd build-vtk-8.2.0-on \
    && cmake -D CMAKE_BUILD_TYPE=Release \
    -D VTK_WRAP_PYTHON=OFF	 \
    -D VTK_OPENGL_HAS_OSMESA=ON \
    -D VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN=OFF \
    -D VTK_USE_X=ON \
    -D CMAKE_INSTALL_PREFIX=/usr/local/vtk820onscreen \
    -D LIBRARY_OUTPUT_PATH=./output_libs \
    -D BOOST_ROOT=/usr/local/boost_1_72_0 \
    /workspace/VTK-8.2.0 \
    && make -j`nproc` && make install  \
    && rm -rf /workspace/build-vtk-8.2.0-on && rm -rf /workspace/build-vtk-8.2.0-off

RUN apt-get install locales sudo \
  && echo 'LC_ALL=zh_CN.UTF-8' > /etc/default/locale && \
  echo 'LANG=zh_CN.UTF-8' >> /etc/default/locale && \
  locale-gen zh_CN.UTF-8 

COPY asEnvUser /usr/local/sbin/
RUN chown root /usr/local/sbin/asEnvUser && chmod 700 /usr/local/sbin/asEnvUser

ENV LC_CTYPE zh_CN.UTF-8

ENTRYPOINT ["asEnvUser"]
CMD ["bash", "-c", "/bin/bash"]



